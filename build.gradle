// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: 'version.gradle'

buildscript {
    repositories {
        google()
        // Required for Browserstack gradle plugin
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'gradle.plugin.com.browserstack.gradle:browserstack-gradle-plugin:3.0.3'
        classpath 'com.android.tools.build:gradle:7.0.2'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            //options.compilerArgs.add("-Xlint:deprecation")
        }
    }
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext {
    versionCode = VERSIONCODE
    versionName = VERSIONNAME
    javaCompatVersion = JavaVersion.VERSION_1_8

    minSdkVersion = 21
    compileSdkVersion = 30
    targetSdkVersion = 30
    lombokVersion = '1.18.18'

    gsonVersion = '2.8.7'
    bumptechGlideVersion = '4.12.0'

    androidMaterialVersion = '1.4.0'
    androidxBrowserVersion = '1.3.0'
    androidxSwiperefreshlayoutVersion = '1.1.0'
    androidxTestCoreVersion = '1.4.0'
    androidxTestRunnerVersion = '1.4.0'
    androidxTestRulesVersion = '1.4.0'
    androidxTestEspressoVersion = '3.4.0'
    androidxTestJunitVersion = '1.1.3'
    androidxTestUIAutomatorVersion = '2.2.0'

    rxjavaVersion = '3.0.8'
    rxandroidVersion = '3.0.0'
    mockitoCoreVersion = '2.23.4'
    robolectricVersion = '4.5.1'
    runnerVersion = '1.0.2'
    rulesVersion = '1.0.2'
    tngDataProviderVersion = '2.8'
    jsonsnapshotVersion = '1.0.17'
    harmcrestVersion = '2.2'
}

task buildci() {
    if (!(project.hasProperty('mavenUser') && project.hasProperty('mavenPassword'))) {
        logger.warn('Missing mavenUser and/or mavenPassword from ~/.gradle/gradle.properties')
        return
    }
    if (!project.hasProperty('packageCloudMavenPassword')) {
        logger.warn('Missing packageCloudMavenPassword from ~/.gradle/gradle.properties')
        return
    }
    dependsOn 'clean'
    dependsOn ':checkout:test'
    dependsOn ':checkout:assembleRelease'
    dependsOn ':example-checkout:runFunctionalTest'
    dependsOn ':example-shop:runFunctionalTest'
    //dependsOn ':checkout:publish'

    tasks.findByPath(':checkout:test').mustRunAfter(clean)
    tasks.findByPath(':checkout:assembleRelease').mustRunAfter(':checkout:test')
    tasks.findByPath(':example-checkout:runFunctionalTest').mustRunAfter(':checkout:assembleRelease')
    tasks.findByPath(':example-shop:runFunctionalTest').mustRunAfter(':example-checkout:runFunctionalTest')
}

static def getCurrentBranch() {
    def branch = ''
    def proc = 'git rev-parse --abbrev-ref HEAD'.execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}
