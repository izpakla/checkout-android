//
// File for increasing the Android version patch, minor and major
//
ext.isReleaseVersion = { ->
    def branchName = getBranchName()
    return branchName.contentEquals('master') || branchName.startsWith('release/')
}

ext.getVersionCodeFromFile = { ->
    return file('VERSIONCODE').text.trim().toInteger()
}

ext.getVersionNameFromFile = { ->
    return file('VERSIONNAME').text.trim()
}

ext.getVersionCode = { ->
   return getVersionCodeFromFile()
}

ext.getVersionName = { ->
    def versionName = getVersionNameFromFile()
    return isReleaseVersion() ? versionName : (versionName  + '-SNAPSHOT')
}

ext.increaseVersionName = { index ->
    def currentName = getVersionNameFromFile()
    def versions = currentName.split("\\.")
    def size = 3

    if (versions.length != size) {
        throw new GradleException("versionName has invalid format, should be: <major>.<minor>.<patch>")
    }
    index.upto(size - 1) {
        if (it == index) {
            def val = Integer.parseInt(versions[it])
            versions[it] = Integer.toString(val + 1)
        } else if (it > index) {
            versions[it] = Integer.toString(0)
        }
    }
    def newName = versions.join(".")
    file('VERSIONNAME').text = newName
    logger.lifecycle("versionName increased from " + currentName + " to " + newName)
}

ext.increaseVersionCode = { ->
    def currentCode = getVersionCodeFromFile()
    def newCode = currentCode + 1
    file('VERSIONCODE').text = newCode
    logger.lifecycle("versionCode increased from " + currentCode + " to " + newCode)

}

task('increaseVersionMajor') {
    doLast {
        increaseVersionName(0)
        increaseVersionCode()
    }
}

task('increaseVersionMinor') {
    doLast {
        increaseVersionName(1)
        increaseVersionCode()
    }
}

task('increaseVersionPatch') {
    doLast {
        increaseVersionName(2)
        increaseVersionCode()
    }
}

task('increaseVersionCode') {
    doLast {
        increaseVersionCode()
    }
}