apply plugin: 'com.android.application'
apply plugin: 'com.browserstack.gradle'

assemble.dependsOn('lint')

android {

    lintOptions {
        abortOnError true
        checkDependencies true
        ignoreWarnings true
    }

    compileOptions {
        sourceCompatibility rootProject.javaCompatVersion
        targetCompatibility rootProject.javaCompatVersion
    }

    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        applicationId 'com.payoneer.checkout.examplecheckout'
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    signingConfigs {
        release {
            storeFile file("$System.env.PLAYSTORE_UPLOAD_STOREFILE")
            storePassword "$System.env.PLAYSTORE_UPLOAD_STOREPASSWORD"
            keyAlias "$System.env.PLAYSTORE_UPLOAD_KEYALIAS"
            keyPassword "$System.env.PLAYSTORE_UPLOAD_KEYPASSWORD"
        }
    }

    buildTypes {
        debug {
            buildConfigField 'String', 'authheader', "\"$System.env.CHECKOUTANDROID_AUTHHEADER\""
            buildConfigField 'String', 'baseurl', "\"$System.env.CHECKOUTANDROID_BASEURL\""

            testVariants.all { testVariant ->
                testVariant.outputs.all { output ->
                    outputFileName = "ExampleCheckout_${getCurrentBranch()}_debug-androidTest.apk"
                }
            }
        }
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "ExampleCheckout_${getCurrentBranch()}_${variant.buildType.name}.apk"
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.google.android.material:material:${rootProject.androidMaterialVersion}"
    implementation "androidx.test.espresso:espresso-idling-resource:${rootProject.androidxTestEspressoVersion}@aar"
    implementation project(":checkout")

    testImplementation "androidx.test.ext:junit:${rootProject.androidxTestJunitVersion}"
    testImplementation "org.hamcrest:hamcrest-library:${rootProject.harmcrestVersion}"

    androidTestImplementation project(":shared-test")
    androidTestImplementation "androidx.test.uiautomator:uiautomator:${rootProject.androidxTestUIAutomatorVersion}"
    androidTestImplementation "androidx.test.ext:junit:${rootProject.androidxTestJunitVersion}"
    androidTestImplementation "androidx.test:runner:${rootProject.androidxTestRunnerVersion}"
    androidTestImplementation "androidx.test:rules:${rootProject.androidxTestRulesVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.androidxTestEspressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-intents:${rootProject.androidxTestEspressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${rootProject.androidxTestEspressoVersion}"
}

task uploadToAppLive {
    if (System.getenv('BROWSERSTACK_USER') == null || System.getenv('BROWSERSTACK_KEY') == null) {
        logger.warn('Missing Browserstack functional test environment variables')
        return
    }
    dependsOn('uploadDebugToBrowserstackAppLive')
    dependsOn('clean')
    clean.mustRunAfter('uploadDebugToBrowserstackAppLive')
}

task runFunctionalTest {
    if (System.getenv('CHECKOUTANDROID_BASEURL') == null || System.getenv('CHECKOUTANDROID_AUTHHEADER') == null) {
        logger.warn('Missing functional test environment variables')
        return
    }
    if (System.getenv('BROWSERSTACK_USER') == null || System.getenv('BROWSERSTACK_KEY') == null) {
        logger.warn('Missing Browserstack functional test environment variables')
        return
    }
    dependsOn('executeDebugTestsOnBrowserstack')
    dependsOn('clean')
    clean.mustRunAfter('executeDebugTestsOnBrowserstack')
}

browserStackConfig {
    username = "$System.env.BROWSERSTACK_USER"
    accessKey = "$System.env.BROWSERSTACK_KEY"
    configFilePath = 'example-checkout/browserstack.json'
}
