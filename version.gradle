//
// File for increasing the Android version patch, minor and major
//
ext.VERSIONCODE = file('VERSIONCODE').text.trim().toInteger()
ext.VERSIONNAME = file('VERSIONNAME').text.trim()

ext.isSnapshotVersion = { ->
    return versionName.endsWith('SNAPSHOT')
}

ext.increaseVersionName = { index ->
    def curName = VERSIONNAME.split("-")
    def newName = curName[0].split("\\.")
    def size = 3

    if (newName.length != size) {
        throw new GradleException("versionName has invalid format, should be: <major>.<minor>.<patch> with optional -SNAPSHOT")
    }
    index.upto(size - 1) {
        if (it == index) {
            def val = Integer.parseInt(newName[it])
            newName[it] = Integer.toString(val + 1)
        } else if (it > index) {
            newName[it] = Integer.toString(0)
        }
    }
    newName = newName.join(".")

    if (curName.length == 2) {
        newName += "-" + curName[1]
    }
    file('VERSIONNAME').text = newName
}

ext.increaseVersionCode = { ->
    def versionCode = VERSIONCODE + 1
    file('VERSIONCODE').text = versionCode
}

task('versionMajor') {
    doLast {
        print "Increasing major of versionName and versionCode"
        increaseVersionName(0)
        increaseVersionCode()
    }
}

task('versionMinor') {
    doLast {
        print "Increasing minor of versionName and versionCode"
        increaseVersionName(1)
        increaseVersionCode()
    }
}

task('versionPatch') {
    doLast {
        print "Increasing patch of versionName and versionCode"
        increaseVersionName(2)
        increaseVersionCode()
    }
}

task('versionCode') {
    doLast {
        print "Increasing versionCode"
        increaseVersionCode()
    }
}
