/*
 * Copyright (c) 2020 Payoneer Germany GmbH
 * https://www.payoneer.com
 *
 * This file is open source and available under the MIT license.
 * See the LICENSE file for more information.
 */

package com.payoneer.checkout.risk;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import com.payoneer.checkout.model.Parameter;
import com.payoneer.checkout.model.ProviderParameters;
import com.payoneer.checkout.util.PaymentUtils;

import android.content.Context;
import android.util.Log;

/**
 * RiskProviderController handles the loaded RiskProvider, it also makes sure to return
 * default risk data when the RiskProvider could not be initialized.
 */
public final class RiskProviderController {

    private final RiskProviderInfo info;
    private RiskProvider riskProvider;

    public RiskProviderController(final RiskProviderInfo info) {
        this.info = info;
    }

    public RiskProviderInfo getRiskProviderInfo() {
        return info;
    }

    public String getRiskProviderCode() {
        return info.getRiskProviderCode();
    }

    public String getRiskProviderType() {
        return info.getRiskProviderType();
    }

    /**
     * Match this risk provider provider code and type with the provided ones.
     *
     * @param riskProviderCode code of the risk provider to match
     * @param riskProviderType type of the risk provider to match
     * @return true when the code and type matches, false otherwise
     */
    public boolean matches(final String riskProviderCode, final String riskProviderType) {
        return (Objects.equals(getRiskProviderCode(), riskProviderCode)) &&
            (Objects.equals(getRiskProviderType(), riskProviderType));
    }

    /**
     * Create a new RiskProviderController from the provided ProviderParameters class
     *
     * @param providerParameters to be converted into a RiskProviderController
     * @return newly created RiskProviderController
     */
    public static RiskProviderController createFrom(final ProviderParameters providerParameters) {
        String providerCode = providerParameters.getProviderCode();
        String providerType = providerParameters.getProviderType();
        Map<String, String> map = new HashMap<>();

        List<Parameter> parameters = providerParameters.getParameters();
        if (parameters != null) {
            for (Parameter parameter : parameters) {
                map.put(parameter.getName(), parameter.getValue());
            }
        }
        RiskProviderInfo info = new RiskProviderInfo(providerCode, providerType, map);
        return new RiskProviderController(info);
    }

    /**
     * Initialize the risk provider controlled by this RiskProviderController
     *
     * @param context into which the risk provider will be initialized
     */
    public void initialize(Context context) {
        String code = info.getRiskProviderCode();
        String type = info.getRiskProviderType();
        RiskProvider provider = RiskProviderLookup.getRiskProvider(context, code, type);
        if (provider == null) {
            String message = "RiskProvider(" + code + ", " + type + ") was not found";
            Log.w("checkout", message);
            return;
        }
        try {
            provider.initialize(context.getApplicationContext(), info);
        } catch (RiskException e) {
            String message = "RiskProvider(" + code + ", " + type + ") failed to load";
            Log.w("checkout", message, e);
        }
    }

    /**
     * Get the risk data generated by the loaded risk provider
     *
     * @return risk data as a ProviderParameters
     */
    public ProviderParameters getRiskData() {
        ProviderParameters providerParameters = new ProviderParameters();
        providerParameters.setProviderCode(getRiskProviderCode());
        providerParameters.setProviderType(getRiskProviderType());
        List<Parameter> parameters = new ArrayList<>();
        providerParameters.setParameters(parameters);

        if (riskProvider == null) {
            return providerParameters;
        }
        try {
            RiskProviderResult result = riskProvider.getRiskProviderResult();
            copyInto(parameters, result.getRiskData());
        } catch (RiskException e) {
            String code = info.getRiskProviderCode();
            String type = info.getRiskProviderType();
            String message = "RiskProvider(" + code + ", " + type + ") result could not be obtained";
            Log.w("checkout", message, e);
        }
        return providerParameters;
    }

    private void copyInto(List<Parameter> parameters, Map<String, String> riskData) {
        for (Map.Entry<String, String> entry : riskData.entrySet()) {
            Parameter param = new Parameter();
            param.setName(entry.getKey());
            param.setValue(entry.getValue());
            parameters.add(param);
        }
    }
}
