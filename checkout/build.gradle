apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

assemble.dependsOn('lint')

android {
    lintOptions {
        abortOnError true
        checkDependencies true
        ignoreWarnings true
    }

    testOptions {
        unitTests {
            includeAndroidResources true
        }
    }

    compileOptions {
        sourceCompatibility rootProject.javaCompatVersion
        targetCompatibility rootProject.javaCompatVersion
    }

    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionName = rootProject.versionName
        versionCode = rootProject.versionCode

        buildConfigField('int', 'VERSION_CODE', "${versionCode}")
        buildConfigField('String', 'VERSION_NAME', "\"${versionName}\"")
    }

    buildTypes {
        release {
            minifyEnabled false
        }
        libraryVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "PayoneerCheckout_${variant.name}_${versionName}.aar"
            }
        }
        applicationVariants {
        }
    }
}

dependencies {
    implementation "com.google.android.material:material:${rootProject.androidMaterialVersion}"
    implementation "com.google.code.gson:gson:${rootProject.gsonVersion}"
    implementation "androidx.browser:browser:${rootProject.androidxBrowserVersion}"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:${rootProject.androidxSwiperefreshlayoutVersion}"
    implementation "androidx.test.espresso:espresso-idling-resource:${rootProject.androidxTestEspressoVersion}@aar"

    compileOnly "org.projectlombok:lombok:${rootProject.lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${rootProject.lombokVersion}"
    testImplementation "org.robolectric:robolectric:${rootProject.robolectricVersion}"
    testImplementation "androidx.test:core:${rootProject.androidxTestCoreVersion}"
    testImplementation "junit:junit:${rootProject.junitVersion}"
    testImplementation "com.tngtech.junit.dataprovider:junit4-dataprovider:${tngDataProviderVersion}"
    testImplementation "io.github.json-snapshot:json-snapshot:${rootProject.jsonsnapshotVersion}"
}

task publishSnapshot {
    if (rootProject.nexusUser == null || rootProject.nexusPassword == null) {
        logger.lifecycle('[PUBLISH-SNAPSHOT] Missing nexusUser and/or nexusPassword environment variables')
        return
    }
    if (rootProject.isSnapshotVersion() == false) {
        logger.lifecycle('[PUBLISH-SNAPSHOT] Only Snapshot artifacts can be published')
        return
    }
    dependsOn 'publish'
}

task publishRelease {
    if (rootProject.nexusUser == null || rootProject.nexusPassword == null) {
        logger.lifecycle('[PUBLISH-RELEASE] Missing nexusUser and/or nexusPassword environment variables')
        return
    }
    if (rootProject.packageCloudToken == null) {
        logger.lifecycle('[PUBLISH-RELEASE] Missing packageCloudToken environment variable')
        return
    }
    if (rootProject.isSnapshotVersion() == true) {
        logger.lifecycle('[SNAPSHOT-RELEASE] Only Release artifacts may be published')
    }
    dependsOn 'publish'
}


// import the script for publishing release builds to Nexus and Packagecloud
apply from: 'publish.gradle'
